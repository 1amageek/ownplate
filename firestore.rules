rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin(request) {
      return request.auth.uid != null && request.auth.token.email != null
    }

    function isUser(request) {
      return request.auth.uid != null && request.auth.token.phone_number != null
    }

    function isOwner(resource, request) {
      return resource.data.uid == request.auth.uid;
    }

    match /users/{userId} {
      allow read, create, update, delete: if request.auth.uid == userId;
    }

    match /restaurants/{restaurantsId} {
      allow read: if true
      // allow create: if isAdmin(request);
      allow update: if isAdmin(request) && isOwner(resource, request);
    }

    match /restaurants/{restaurantsId}/menus/{menuId} {
      allow read: if true
      allow create: if isAdmin(request)
      allow update: if isAdmin(request) && isOwner(resource, request);
    }
    match /restaurants/{restaurantsId}/titles/{titleId} {
      allow read: if true
      allow create: if isAdmin(request)
      allow update: if isAdmin(request) && isOwner(resource, request);
    }
    match /restaurants/{restaurantsId}/orders/{orderId} {
      allow create: if isUser(request)
                      && request.resource.data.uid == request.auth.uid;
      allow read: if isAdmin(request); // BUGBUG we need more
      allow read: if isUser(request) && isOwner(resource, request);
      allow delete: if isOwner(resource, request)
                      && resource.data.status == 200; // validated
      allow update: if isOwner(resource, request)
                      && resource.data.status == 200
                      && request.resource.data.status == 300; // HACK: Temporary During no-sprite Testing
      allow update: if isAdmin(request); // HACK: check the owner of restaurant
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
